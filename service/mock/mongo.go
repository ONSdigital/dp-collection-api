// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-collection-api/collections"
	"github.com/ONSdigital/dp-collection-api/models"
	"github.com/ONSdigital/dp-collection-api/service"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that MongoDBMock does implement service.MongoDB.
// If this is not the case, regenerate this file with moq.
var _ service.MongoDB = &MongoDBMock{}

// MongoDBMock is a mock implementation of service.MongoDB.
//
//     func TestSomethingThatUsesMongoDB(t *testing.T) {
//
//         // make and configure a mocked service.MongoDB
//         mockedMongoDB := &MongoDBMock{
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(in1 context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetCollectionByIDFunc: func(ctx context.Context, id string, eTagSelector string) (*models.Collection, error) {
// 	               panic("mock out the GetCollectionByID method")
//             },
//             GetCollectionByNameFunc: func(ctx context.Context, name string) (*models.Collection, error) {
// 	               panic("mock out the GetCollectionByName method")
//             },
//             GetCollectionEventsFunc: func(ctx context.Context, queryParams collections.EventsQueryParams) ([]models.Event, int, error) {
// 	               panic("mock out the GetCollectionEvents method")
//             },
//             GetCollectionsFunc: func(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error) {
// 	               panic("mock out the GetCollections method")
//             },
//             UpsertCollectionFunc: func(ctx context.Context, collection *models.Collection) error {
// 	               panic("mock out the UpsertCollection method")
//             },
//         }
//
//         // use mockedMongoDB in code that requires service.MongoDB
//         // and then make assertions.
//
//     }
type MongoDBMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(in1 context.Context) error

	// GetCollectionByIDFunc mocks the GetCollectionByID method.
	GetCollectionByIDFunc func(ctx context.Context, id string, eTagSelector string) (*models.Collection, error)

	// GetCollectionByNameFunc mocks the GetCollectionByName method.
	GetCollectionByNameFunc func(ctx context.Context, name string) (*models.Collection, error)

	// GetCollectionEventsFunc mocks the GetCollectionEvents method.
	GetCollectionEventsFunc func(ctx context.Context, queryParams collections.EventsQueryParams) ([]models.Event, int, error)

	// GetCollectionsFunc mocks the GetCollections method.
	GetCollectionsFunc func(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error)

	// UpsertCollectionFunc mocks the UpsertCollection method.
	UpsertCollectionFunc func(ctx context.Context, collection *models.Collection) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetCollectionByID holds details about calls to the GetCollectionByID method.
		GetCollectionByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// GetCollectionByName holds details about calls to the GetCollectionByName method.
		GetCollectionByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetCollectionEvents holds details about calls to the GetCollectionEvents method.
		GetCollectionEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// QueryParams is the queryParams argument value.
			QueryParams collections.EventsQueryParams
		}
		// GetCollections holds details about calls to the GetCollections method.
		GetCollections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// QueryParams is the queryParams argument value.
			QueryParams collections.QueryParams
		}
		// UpsertCollection holds details about calls to the UpsertCollection method.
		UpsertCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Collection is the collection argument value.
			Collection *models.Collection
		}
	}
	lockChecker             sync.RWMutex
	lockClose               sync.RWMutex
	lockGetCollectionByID   sync.RWMutex
	lockGetCollectionByName sync.RWMutex
	lockGetCollectionEvents sync.RWMutex
	lockGetCollections      sync.RWMutex
	lockUpsertCollection    sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *MongoDBMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoDBMock.CheckerFunc: method is nil but MongoDB.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoDB.CheckerCalls())
func (mock *MongoDBMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoDBMock) Close(in1 context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoDBMock.CloseFunc: method is nil but MongoDB.Close was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(in1)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoDB.CloseCalls())
func (mock *MongoDBMock) CloseCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetCollectionByID calls GetCollectionByIDFunc.
func (mock *MongoDBMock) GetCollectionByID(ctx context.Context, id string, eTagSelector string) (*models.Collection, error) {
	if mock.GetCollectionByIDFunc == nil {
		panic("MongoDBMock.GetCollectionByIDFunc: method is nil but MongoDB.GetCollectionByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           string
		ETagSelector string
	}{
		Ctx:          ctx,
		ID:           id,
		ETagSelector: eTagSelector,
	}
	mock.lockGetCollectionByID.Lock()
	mock.calls.GetCollectionByID = append(mock.calls.GetCollectionByID, callInfo)
	mock.lockGetCollectionByID.Unlock()
	return mock.GetCollectionByIDFunc(ctx, id, eTagSelector)
}

// GetCollectionByIDCalls gets all the calls that were made to GetCollectionByID.
// Check the length with:
//     len(mockedMongoDB.GetCollectionByIDCalls())
func (mock *MongoDBMock) GetCollectionByIDCalls() []struct {
	Ctx          context.Context
	ID           string
	ETagSelector string
} {
	var calls []struct {
		Ctx          context.Context
		ID           string
		ETagSelector string
	}
	mock.lockGetCollectionByID.RLock()
	calls = mock.calls.GetCollectionByID
	mock.lockGetCollectionByID.RUnlock()
	return calls
}

// GetCollectionByName calls GetCollectionByNameFunc.
func (mock *MongoDBMock) GetCollectionByName(ctx context.Context, name string) (*models.Collection, error) {
	if mock.GetCollectionByNameFunc == nil {
		panic("MongoDBMock.GetCollectionByNameFunc: method is nil but MongoDB.GetCollectionByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetCollectionByName.Lock()
	mock.calls.GetCollectionByName = append(mock.calls.GetCollectionByName, callInfo)
	mock.lockGetCollectionByName.Unlock()
	return mock.GetCollectionByNameFunc(ctx, name)
}

// GetCollectionByNameCalls gets all the calls that were made to GetCollectionByName.
// Check the length with:
//     len(mockedMongoDB.GetCollectionByNameCalls())
func (mock *MongoDBMock) GetCollectionByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetCollectionByName.RLock()
	calls = mock.calls.GetCollectionByName
	mock.lockGetCollectionByName.RUnlock()
	return calls
}

// GetCollectionEvents calls GetCollectionEventsFunc.
func (mock *MongoDBMock) GetCollectionEvents(ctx context.Context, queryParams collections.EventsQueryParams) ([]models.Event, int, error) {
	if mock.GetCollectionEventsFunc == nil {
		panic("MongoDBMock.GetCollectionEventsFunc: method is nil but MongoDB.GetCollectionEvents was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		QueryParams collections.EventsQueryParams
	}{
		Ctx:         ctx,
		QueryParams: queryParams,
	}
	mock.lockGetCollectionEvents.Lock()
	mock.calls.GetCollectionEvents = append(mock.calls.GetCollectionEvents, callInfo)
	mock.lockGetCollectionEvents.Unlock()
	return mock.GetCollectionEventsFunc(ctx, queryParams)
}

// GetCollectionEventsCalls gets all the calls that were made to GetCollectionEvents.
// Check the length with:
//     len(mockedMongoDB.GetCollectionEventsCalls())
func (mock *MongoDBMock) GetCollectionEventsCalls() []struct {
	Ctx         context.Context
	QueryParams collections.EventsQueryParams
} {
	var calls []struct {
		Ctx         context.Context
		QueryParams collections.EventsQueryParams
	}
	mock.lockGetCollectionEvents.RLock()
	calls = mock.calls.GetCollectionEvents
	mock.lockGetCollectionEvents.RUnlock()
	return calls
}

// GetCollections calls GetCollectionsFunc.
func (mock *MongoDBMock) GetCollections(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error) {
	if mock.GetCollectionsFunc == nil {
		panic("MongoDBMock.GetCollectionsFunc: method is nil but MongoDB.GetCollections was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		QueryParams collections.QueryParams
	}{
		Ctx:         ctx,
		QueryParams: queryParams,
	}
	mock.lockGetCollections.Lock()
	mock.calls.GetCollections = append(mock.calls.GetCollections, callInfo)
	mock.lockGetCollections.Unlock()
	return mock.GetCollectionsFunc(ctx, queryParams)
}

// GetCollectionsCalls gets all the calls that were made to GetCollections.
// Check the length with:
//     len(mockedMongoDB.GetCollectionsCalls())
func (mock *MongoDBMock) GetCollectionsCalls() []struct {
	Ctx         context.Context
	QueryParams collections.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		QueryParams collections.QueryParams
	}
	mock.lockGetCollections.RLock()
	calls = mock.calls.GetCollections
	mock.lockGetCollections.RUnlock()
	return calls
}

// UpsertCollection calls UpsertCollectionFunc.
func (mock *MongoDBMock) UpsertCollection(ctx context.Context, collection *models.Collection) error {
	if mock.UpsertCollectionFunc == nil {
		panic("MongoDBMock.UpsertCollectionFunc: method is nil but MongoDB.UpsertCollection was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Collection *models.Collection
	}{
		Ctx:        ctx,
		Collection: collection,
	}
	mock.lockUpsertCollection.Lock()
	mock.calls.UpsertCollection = append(mock.calls.UpsertCollection, callInfo)
	mock.lockUpsertCollection.Unlock()
	return mock.UpsertCollectionFunc(ctx, collection)
}

// UpsertCollectionCalls gets all the calls that were made to UpsertCollection.
// Check the length with:
//     len(mockedMongoDB.UpsertCollectionCalls())
func (mock *MongoDBMock) UpsertCollectionCalls() []struct {
	Ctx        context.Context
	Collection *models.Collection
} {
	var calls []struct {
		Ctx        context.Context
		Collection *models.Collection
	}
	mock.lockUpsertCollection.RLock()
	calls = mock.calls.UpsertCollection
	mock.lockUpsertCollection.RUnlock()
	return calls
}
