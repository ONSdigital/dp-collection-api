// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-collection-api/api"
	"github.com/ONSdigital/dp-collection-api/collections"
	"github.com/ONSdigital/dp-collection-api/models"
	"sync"
)

// Ensure, that CollectionStoreMock does implement api.CollectionStore.
// If this is not the case, regenerate this file with moq.
var _ api.CollectionStore = &CollectionStoreMock{}

// CollectionStoreMock is a mock implementation of api.CollectionStore.
//
//     func TestSomethingThatUsesCollectionStore(t *testing.T) {
//
//         // make and configure a mocked api.CollectionStore
//         mockedCollectionStore := &CollectionStoreMock{
//             AddCollectionFunc: func(ctx context.Context, collection *models.Collection) error {
// 	               panic("mock out the AddCollection method")
//             },
//             GetCollectionByIDFunc: func(ctx context.Context, id string, eTagSelector string) (*models.Collection, error) {
// 	               panic("mock out the GetCollectionByID method")
//             },
//             GetCollectionByNameFunc: func(ctx context.Context, name string) (*models.Collection, error) {
// 	               panic("mock out the GetCollectionByName method")
//             },
//             GetCollectionEventsFunc: func(ctx context.Context, queryParams collections.EventsQueryParams) ([]models.Event, int, error) {
// 	               panic("mock out the GetCollectionEvents method")
//             },
//             GetCollectionsFunc: func(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error) {
// 	               panic("mock out the GetCollections method")
//             },
//             ReplaceCollectionFunc: func(ctx context.Context, collection *models.Collection, eTagSelector string) error {
// 	               panic("mock out the ReplaceCollection method")
//             },
//         }
//
//         // use mockedCollectionStore in code that requires api.CollectionStore
//         // and then make assertions.
//
//     }
type CollectionStoreMock struct {
	// AddCollectionFunc mocks the AddCollection method.
	AddCollectionFunc func(ctx context.Context, collection *models.Collection) error

	// GetCollectionByIDFunc mocks the GetCollectionByID method.
	GetCollectionByIDFunc func(ctx context.Context, id string, eTagSelector string) (*models.Collection, error)

	// GetCollectionByNameFunc mocks the GetCollectionByName method.
	GetCollectionByNameFunc func(ctx context.Context, name string) (*models.Collection, error)

	// GetCollectionEventsFunc mocks the GetCollectionEvents method.
	GetCollectionEventsFunc func(ctx context.Context, queryParams collections.EventsQueryParams) ([]models.Event, int, error)

	// GetCollectionsFunc mocks the GetCollections method.
	GetCollectionsFunc func(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error)

	// ReplaceCollectionFunc mocks the ReplaceCollection method.
	ReplaceCollectionFunc func(ctx context.Context, collection *models.Collection, eTagSelector string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddCollection holds details about calls to the AddCollection method.
		AddCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Collection is the collection argument value.
			Collection *models.Collection
		}
		// GetCollectionByID holds details about calls to the GetCollectionByID method.
		GetCollectionByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
		// GetCollectionByName holds details about calls to the GetCollectionByName method.
		GetCollectionByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetCollectionEvents holds details about calls to the GetCollectionEvents method.
		GetCollectionEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// QueryParams is the queryParams argument value.
			QueryParams collections.EventsQueryParams
		}
		// GetCollections holds details about calls to the GetCollections method.
		GetCollections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// QueryParams is the queryParams argument value.
			QueryParams collections.QueryParams
		}
		// ReplaceCollection holds details about calls to the ReplaceCollection method.
		ReplaceCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Collection is the collection argument value.
			Collection *models.Collection
			// ETagSelector is the eTagSelector argument value.
			ETagSelector string
		}
	}
	lockAddCollection       sync.RWMutex
	lockGetCollectionByID   sync.RWMutex
	lockGetCollectionByName sync.RWMutex
	lockGetCollectionEvents sync.RWMutex
	lockGetCollections      sync.RWMutex
	lockReplaceCollection   sync.RWMutex
}

// AddCollection calls AddCollectionFunc.
func (mock *CollectionStoreMock) AddCollection(ctx context.Context, collection *models.Collection) error {
	if mock.AddCollectionFunc == nil {
		panic("CollectionStoreMock.AddCollectionFunc: method is nil but CollectionStore.AddCollection was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Collection *models.Collection
	}{
		Ctx:        ctx,
		Collection: collection,
	}
	mock.lockAddCollection.Lock()
	mock.calls.AddCollection = append(mock.calls.AddCollection, callInfo)
	mock.lockAddCollection.Unlock()
	return mock.AddCollectionFunc(ctx, collection)
}

// AddCollectionCalls gets all the calls that were made to AddCollection.
// Check the length with:
//     len(mockedCollectionStore.AddCollectionCalls())
func (mock *CollectionStoreMock) AddCollectionCalls() []struct {
	Ctx        context.Context
	Collection *models.Collection
} {
	var calls []struct {
		Ctx        context.Context
		Collection *models.Collection
	}
	mock.lockAddCollection.RLock()
	calls = mock.calls.AddCollection
	mock.lockAddCollection.RUnlock()
	return calls
}

// GetCollectionByID calls GetCollectionByIDFunc.
func (mock *CollectionStoreMock) GetCollectionByID(ctx context.Context, id string, eTagSelector string) (*models.Collection, error) {
	if mock.GetCollectionByIDFunc == nil {
		panic("CollectionStoreMock.GetCollectionByIDFunc: method is nil but CollectionStore.GetCollectionByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           string
		ETagSelector string
	}{
		Ctx:          ctx,
		ID:           id,
		ETagSelector: eTagSelector,
	}
	mock.lockGetCollectionByID.Lock()
	mock.calls.GetCollectionByID = append(mock.calls.GetCollectionByID, callInfo)
	mock.lockGetCollectionByID.Unlock()
	return mock.GetCollectionByIDFunc(ctx, id, eTagSelector)
}

// GetCollectionByIDCalls gets all the calls that were made to GetCollectionByID.
// Check the length with:
//     len(mockedCollectionStore.GetCollectionByIDCalls())
func (mock *CollectionStoreMock) GetCollectionByIDCalls() []struct {
	Ctx          context.Context
	ID           string
	ETagSelector string
} {
	var calls []struct {
		Ctx          context.Context
		ID           string
		ETagSelector string
	}
	mock.lockGetCollectionByID.RLock()
	calls = mock.calls.GetCollectionByID
	mock.lockGetCollectionByID.RUnlock()
	return calls
}

// GetCollectionByName calls GetCollectionByNameFunc.
func (mock *CollectionStoreMock) GetCollectionByName(ctx context.Context, name string) (*models.Collection, error) {
	if mock.GetCollectionByNameFunc == nil {
		panic("CollectionStoreMock.GetCollectionByNameFunc: method is nil but CollectionStore.GetCollectionByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetCollectionByName.Lock()
	mock.calls.GetCollectionByName = append(mock.calls.GetCollectionByName, callInfo)
	mock.lockGetCollectionByName.Unlock()
	return mock.GetCollectionByNameFunc(ctx, name)
}

// GetCollectionByNameCalls gets all the calls that were made to GetCollectionByName.
// Check the length with:
//     len(mockedCollectionStore.GetCollectionByNameCalls())
func (mock *CollectionStoreMock) GetCollectionByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetCollectionByName.RLock()
	calls = mock.calls.GetCollectionByName
	mock.lockGetCollectionByName.RUnlock()
	return calls
}

// GetCollectionEvents calls GetCollectionEventsFunc.
func (mock *CollectionStoreMock) GetCollectionEvents(ctx context.Context, queryParams collections.EventsQueryParams) ([]models.Event, int, error) {
	if mock.GetCollectionEventsFunc == nil {
		panic("CollectionStoreMock.GetCollectionEventsFunc: method is nil but CollectionStore.GetCollectionEvents was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		QueryParams collections.EventsQueryParams
	}{
		Ctx:         ctx,
		QueryParams: queryParams,
	}
	mock.lockGetCollectionEvents.Lock()
	mock.calls.GetCollectionEvents = append(mock.calls.GetCollectionEvents, callInfo)
	mock.lockGetCollectionEvents.Unlock()
	return mock.GetCollectionEventsFunc(ctx, queryParams)
}

// GetCollectionEventsCalls gets all the calls that were made to GetCollectionEvents.
// Check the length with:
//     len(mockedCollectionStore.GetCollectionEventsCalls())
func (mock *CollectionStoreMock) GetCollectionEventsCalls() []struct {
	Ctx         context.Context
	QueryParams collections.EventsQueryParams
} {
	var calls []struct {
		Ctx         context.Context
		QueryParams collections.EventsQueryParams
	}
	mock.lockGetCollectionEvents.RLock()
	calls = mock.calls.GetCollectionEvents
	mock.lockGetCollectionEvents.RUnlock()
	return calls
}

// GetCollections calls GetCollectionsFunc.
func (mock *CollectionStoreMock) GetCollections(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error) {
	if mock.GetCollectionsFunc == nil {
		panic("CollectionStoreMock.GetCollectionsFunc: method is nil but CollectionStore.GetCollections was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		QueryParams collections.QueryParams
	}{
		Ctx:         ctx,
		QueryParams: queryParams,
	}
	mock.lockGetCollections.Lock()
	mock.calls.GetCollections = append(mock.calls.GetCollections, callInfo)
	mock.lockGetCollections.Unlock()
	return mock.GetCollectionsFunc(ctx, queryParams)
}

// GetCollectionsCalls gets all the calls that were made to GetCollections.
// Check the length with:
//     len(mockedCollectionStore.GetCollectionsCalls())
func (mock *CollectionStoreMock) GetCollectionsCalls() []struct {
	Ctx         context.Context
	QueryParams collections.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		QueryParams collections.QueryParams
	}
	mock.lockGetCollections.RLock()
	calls = mock.calls.GetCollections
	mock.lockGetCollections.RUnlock()
	return calls
}

// ReplaceCollection calls ReplaceCollectionFunc.
func (mock *CollectionStoreMock) ReplaceCollection(ctx context.Context, collection *models.Collection, eTagSelector string) error {
	if mock.ReplaceCollectionFunc == nil {
		panic("CollectionStoreMock.ReplaceCollectionFunc: method is nil but CollectionStore.ReplaceCollection was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Collection   *models.Collection
		ETagSelector string
	}{
		Ctx:          ctx,
		Collection:   collection,
		ETagSelector: eTagSelector,
	}
	mock.lockReplaceCollection.Lock()
	mock.calls.ReplaceCollection = append(mock.calls.ReplaceCollection, callInfo)
	mock.lockReplaceCollection.Unlock()
	return mock.ReplaceCollectionFunc(ctx, collection, eTagSelector)
}

// ReplaceCollectionCalls gets all the calls that were made to ReplaceCollection.
// Check the length with:
//     len(mockedCollectionStore.ReplaceCollectionCalls())
func (mock *CollectionStoreMock) ReplaceCollectionCalls() []struct {
	Ctx          context.Context
	Collection   *models.Collection
	ETagSelector string
} {
	var calls []struct {
		Ctx          context.Context
		Collection   *models.Collection
		ETagSelector string
	}
	mock.lockReplaceCollection.RLock()
	calls = mock.calls.ReplaceCollection
	mock.lockReplaceCollection.RUnlock()
	return calls
}
