// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-collection-api/api"
	"github.com/ONSdigital/dp-collection-api/collections"
	"github.com/ONSdigital/dp-collection-api/models"
	"sync"
)

// Ensure, that CollectionStoreMock does implement api.CollectionStore.
// If this is not the case, regenerate this file with moq.
var _ api.CollectionStore = &CollectionStoreMock{}

// CollectionStoreMock is a mock implementation of api.CollectionStore.
//
//     func TestSomethingThatUsesCollectionStore(t *testing.T) {
//
//         // make and configure a mocked api.CollectionStore
//         mockedCollectionStore := &CollectionStoreMock{
//             GetCollectionsFunc: func(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error) {
// 	               panic("mock out the GetCollections method")
//             },
//             UpsertCollectionFunc: func(ctx context.Context, collection *models.Collection) error {
// 	               panic("mock out the UpsertCollection method")
//             },
//         }
//
//         // use mockedCollectionStore in code that requires api.CollectionStore
//         // and then make assertions.
//
//     }
type CollectionStoreMock struct {
	// GetCollectionsFunc mocks the GetCollections method.
	GetCollectionsFunc func(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error)

	// UpsertCollectionFunc mocks the UpsertCollection method.
	UpsertCollectionFunc func(ctx context.Context, collection *models.Collection) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCollections holds details about calls to the GetCollections method.
		GetCollections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// QueryParams is the queryParams argument value.
			QueryParams collections.QueryParams
		}
		// UpsertCollection holds details about calls to the UpsertCollection method.
		UpsertCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Collection is the collection argument value.
			Collection *models.Collection
		}
	}
	lockGetCollections   sync.RWMutex
	lockUpsertCollection sync.RWMutex
}

// GetCollections calls GetCollectionsFunc.
func (mock *CollectionStoreMock) GetCollections(ctx context.Context, queryParams collections.QueryParams) ([]models.Collection, int, error) {
	if mock.GetCollectionsFunc == nil {
		panic("CollectionStoreMock.GetCollectionsFunc: method is nil but CollectionStore.GetCollections was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		QueryParams collections.QueryParams
	}{
		Ctx:         ctx,
		QueryParams: queryParams,
	}
	mock.lockGetCollections.Lock()
	mock.calls.GetCollections = append(mock.calls.GetCollections, callInfo)
	mock.lockGetCollections.Unlock()
	return mock.GetCollectionsFunc(ctx, queryParams)
}

// GetCollectionsCalls gets all the calls that were made to GetCollections.
// Check the length with:
//     len(mockedCollectionStore.GetCollectionsCalls())
func (mock *CollectionStoreMock) GetCollectionsCalls() []struct {
	Ctx         context.Context
	QueryParams collections.QueryParams
} {
	var calls []struct {
		Ctx         context.Context
		QueryParams collections.QueryParams
	}
	mock.lockGetCollections.RLock()
	calls = mock.calls.GetCollections
	mock.lockGetCollections.RUnlock()
	return calls
}

// UpsertCollection calls UpsertCollectionFunc.
func (mock *CollectionStoreMock) UpsertCollection(ctx context.Context, collection *models.Collection) error {
	if mock.UpsertCollectionFunc == nil {
		panic("CollectionStoreMock.UpsertCollectionFunc: method is nil but CollectionStore.UpsertCollection was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Collection *models.Collection
	}{
		Ctx:        ctx,
		Collection: collection,
	}
	mock.lockUpsertCollection.Lock()
	mock.calls.UpsertCollection = append(mock.calls.UpsertCollection, callInfo)
	mock.lockUpsertCollection.Unlock()
	return mock.UpsertCollectionFunc(ctx, collection)
}

// UpsertCollectionCalls gets all the calls that were made to UpsertCollection.
// Check the length with:
//     len(mockedCollectionStore.UpsertCollectionCalls())
func (mock *CollectionStoreMock) UpsertCollectionCalls() []struct {
	Ctx        context.Context
	Collection *models.Collection
} {
	var calls []struct {
		Ctx        context.Context
		Collection *models.Collection
	}
	mock.lockUpsertCollection.RLock()
	calls = mock.calls.UpsertCollection
	mock.lockUpsertCollection.RUnlock()
	return calls
}
